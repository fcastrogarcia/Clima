{"version":3,"sources":["Top.js","Card.js","Bottom.js","App.js","serviceWorker.js","index.js"],"names":["Top","props","current","location","react_default","a","createElement","className","src","condition","icon","alt","temp_c","name","region","country","feelslike_c","humidity","semana","Card","fecha","dia","date_epoch","Date","getDay","date","day","parseInt","maxtemp_c","mintemp_c","Bottom","forecast","forecastday","map","src_Card","key","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","clima","isLoaded","_this2","fetch","then","result","json","data","replace","setState","_this$state$clima","src_Top","src_Bottom","Component","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAuBeA,EArBH,SAAAC,GAAS,IACXC,EAAsBD,EAAtBC,QAASC,EAAaF,EAAbE,SACjB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OACEE,IAAKN,EAAQO,UAAUC,KACvBC,IAAI,kBACJJ,UAAU,UAEZH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAQL,EAAQU,OAA7B,UACAR,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QACXJ,EAASU,KADZ,KACoBV,EAASW,OAD7B,KACuCX,EAASY,SAGhDX,EAAAC,EAAAC,cAAA,kBACOJ,EAAQc,YADf,cACoCd,EAAQe,SAD5C,QCdAC,EAAS,CACb,QACA,SACA,eACA,SACA,UACA,YACA,WAgCaC,EAzBF,SAAAlB,GAAS,IAJHmB,EAKTC,EAAQpB,EAARoB,IACR,OACEjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,WARac,EAQGC,EAAIC,WAPjBJ,EAAO,IAAIK,KAAa,IAARH,GAAcI,YAQjCpB,EAAAC,EAAAC,cAAA,UAAKe,EAAII,MACTrB,EAAAC,EAAAC,cAAA,OACEE,IAAKa,EAAIK,IAAIjB,UAAUC,KACvBC,IAAI,eACJJ,UAAU,gBAEZH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,YACfoB,SAASN,EAAIK,IAAIE,YAEpBxB,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,YACfoB,SAASN,EAAIK,IAAIG,eCpBbC,EAXA,SAAA7B,GAAS,IACd8B,EAAa9B,EAAb8B,SACR,OACE3B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACZwB,EAASC,YAAYC,IAAI,SAAAZ,GACxB,OAAOjB,EAAAC,EAAAC,cAAC4B,EAAD,CAAMb,IAAKA,EAAKc,IAAKd,EAAII,WCsCzBW,qBAvCb,SAAAA,EAAYnC,GAAO,IAAAoC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMvC,KACD2C,MAAQ,CACXC,MAAO,GACPC,UAAU,GAJKT,mFAQC,IAAAU,EAAAP,KAClBQ,MACE,sFAECC,KAAK,SAAAC,GAAM,OAAIA,EAAOC,SACtBF,KAAK,SAAAG,GAEJA,EAAKlD,QAAQO,UAAUC,KAAO0C,EAAKlD,QAAQO,UAAUC,KAAK2C,QACxD,QACA,WAEFN,EAAKO,SAAS,CAAET,MAAOO,EAAMN,UAAU,uCAIpC,IAAAS,EACiCf,KAAKI,MAAMC,MAA3C1C,EADDoD,EACCpD,SAAUD,EADXqD,EACWrD,QAAS6B,EADpBwB,EACoBxB,SAC3B,OAAOS,KAAKI,MAAME,SAChB1C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACkD,EAAD,CAAKtD,QAASA,EAASC,SAAUA,IAEjCC,EAAAC,EAAAC,cAACmD,EAAD,CAAQ1B,SAAUA,MAItB3B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAf,qBAnCYmD,cCMEC,QACW,cAA7BC,OAAOzD,SAAS0D,UAEe,UAA7BD,OAAOzD,SAAS0D,UAEhBD,OAAOzD,SAAS0D,SAASC,MACvB,2DCZNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,KAAK,SAAAsB,GACjCA,EAAaC","file":"static/js/main.4aaf96f1.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Top = props => {\r\n  const { current, location } = props\r\n  return (\r\n    <div className=\"top\">\r\n      <img\r\n        src={current.condition.icon}\r\n        alt=\"Clima principal\"\r\n        className=\"image\"\r\n      />\r\n      <p className=\"temp\">{current.temp_c} °C</p>\r\n      <h4 className=\"city\">\r\n        {location.name}, {location.region}, {location.country}\r\n      </h4>\r\n\r\n      <div>\r\n        ST: {current.feelslike_c} °C, H: {current.humidity} %\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Top\r\n","import React from 'react'\r\n\r\nconst semana = [\r\n  'Lunes',\r\n  'Martes',\r\n  'Miércoles',\r\n  'Jueves',\r\n  'Viernes',\r\n  'Sábado',\r\n  'Domingo',\r\n]\r\n\r\nconst getWeekDay = fecha => {\r\n  return semana[new Date(fecha * 1000).getDay()]\r\n}\r\n\r\nconst Card = props => {\r\n  const { dia } = props\r\n  return (\r\n    <div className=\"card\">\r\n      <h5>{getWeekDay(dia.date_epoch)}</h5>\r\n      <h6>{dia.date}</h6>\r\n      <img\r\n        src={dia.day.condition.icon}\r\n        alt=\"Clima diario\"\r\n        className=\"imagebottom\"\r\n      />\r\n      <div className=\"minmax\">\r\n        <p>\r\n          <span className=\"tempmax\" />\r\n          {parseInt(dia.day.maxtemp_c)}\r\n        </p>\r\n        <p>\r\n          <span className=\"tempmin\" />\r\n          {parseInt(dia.day.mintemp_c)}\r\n        </p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Card\r\n","import React from 'react'\r\nimport Card from './Card'\r\n\r\nconst Bottom = props => {\r\n  const { forecast } = props\r\n  return (\r\n    <div className=\"bottom\">\r\n      {forecast.forecastday.map(dia => {\r\n        return <Card dia={dia} key={dia.date} />\r\n      })}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Bottom\r\n","import React, { Component } from 'react'\r\nimport Top from './Top'\r\nimport Bottom from './Bottom'\r\n\r\nimport './App.css'\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      clima: {},\r\n      isLoaded: false,\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\r\n      'https://wt-c42b8db789fa0a0fa7eb298076db922d-0.sandbox.auth0-extend.com/clima-apixu'\r\n    )\r\n      .then(result => result.json())\r\n      .then(data => {\r\n        //Cambiamos la resolución del ícono del día actual para que sea más grande\r\n        data.current.condition.icon = data.current.condition.icon.replace(\r\n          '64x64',\r\n          '128x128',\r\n        )\r\n        this.setState({ clima: data, isLoaded: true })\r\n      })\r\n  }\r\n\r\n  render() {\r\n    const { location, current, forecast } = this.state.clima\r\n    return this.state.isLoaded ? (\r\n      <div className=\"App\">\r\n        <div className=\"container\">\r\n          <Top current={current} location={location} />\r\n\r\n          <Bottom forecast={forecast} />\r\n        </div>\r\n      </div>\r\n    ) : (\r\n      <div className=\"App\">Loading...</div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}